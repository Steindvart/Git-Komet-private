from typing import Dict, List
from datetime import datetime
from sqlalchemy.orm import Session
from sqlalchemy import func
from app.models.models import Team, TeamMember, Task, PullRequest


class BottleneckService:
    """Service for analyzing workflow bottlenecks."""

    @staticmethod
    def analyze_bottlenecks(
        db: Session,
        team_id: int,
        period_start: datetime,
        period_end: datetime
    ) -> Dict:
        """Analyze workflow bottlenecks by stage."""
        team = db.query(Team).filter(Team.id == team_id).first()
        if not team:
            return None
        
        member_ids = [m.id for m in team.members]
        
        # Get tasks for the team
        tasks = db.query(Task).filter(
            Task.assignee_id.in_(member_ids),
            Task.created_at.between(period_start, period_end)
        ).all()
        
        # Get pull requests
        prs = db.query(PullRequest).filter(
            PullRequest.author_id.in_(member_ids),
            PullRequest.created_at.between(period_start, period_end)
        ).all()
        
        if not tasks and not prs:
            return {
                "team_id": team_id,
                "bottleneck_stage": "none",
                "avg_time_in_stage": 0,
                "affected_tasks_count": 0,
                "impact_score": 0,
                "recommendations": ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"],
                "period_start": period_start,
                "period_end": period_end,
            }
        
        # Calculate average time in each stage
        stages = {
            "todo": [],
            "development": [],
            "review": [],
            "testing": []
        }
        
        for task in tasks:
            if task.time_in_todo:
                stages["todo"].append(task.time_in_todo)
            if task.time_in_development:
                stages["development"].append(task.time_in_development)
            if task.time_in_review:
                stages["review"].append(task.time_in_review)
            if task.time_in_testing:
                stages["testing"].append(task.time_in_testing)
        
        # Add PR review times to review stage
        for pr in prs:
            if pr.time_to_first_review:
                stages["review"].append(pr.time_to_first_review)
        
        # Calculate averages
        stage_averages = {}
        for stage, times in stages.items():
            if times:
                stage_averages[stage] = sum(times) / len(times)
            else:
                stage_averages[stage] = 0
        
        # Find bottleneck (stage with highest average time)
        if stage_averages:
            bottleneck_stage = max(stage_averages, key=stage_averages.get)
            avg_time_in_stage = stage_averages[bottleneck_stage]
        else:
            bottleneck_stage = "none"
            avg_time_in_stage = 0
        
        # Count affected tasks
        affected_tasks_count = len(stages.get(bottleneck_stage, []))
        
        # Calculate impact score (0-100, higher means more severe bottleneck)
        if avg_time_in_stage == 0:
            impact_score = 0
        else:
            # Impact based on time and number of affected items
            time_impact = min(100, (avg_time_in_stage / 24) * 20)  # Per day
            volume_impact = min(50, affected_tasks_count * 5)
            impact_score = time_impact + volume_impact
        
        # Generate recommendations
        recommendations = []
        
        if bottleneck_stage == "review":
            recommendations.append(
                f"‚ö†Ô∏è –†–µ–≤—å—é –∫–æ–¥–∞ ‚Äî —É–∑–∫–æ–µ –º–µ—Å—Ç–æ (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {avg_time_in_stage:.1f} —á–∞—Å–æ–≤). "
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ —Ä–µ–≤—å—é–µ—Ä–æ–≤, —É—Å—Ç–∞–Ω–æ–≤–∫—É SLA –¥–ª—è —Ä–µ–≤—å—é –∏–ª–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫."
            )
            if avg_time_in_stage > 48:
                recommendations.append(
                    "–†–µ–≤—å—é –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª–µ–µ 2 –¥–Ω–µ–π –≤ —Å—Ä–µ–¥–Ω–µ–º. "
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ pending —Ä–µ–≤—å—é –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É—é—Ç –∑–∞–¥–∞—á–∏ —Ä–µ–≤—å—é."
                )
        elif bottleneck_stage == "development":
            recommendations.append(
                f"‚ö†Ô∏è –≠—Ç–∞–ø —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {avg_time_in_stage:.1f} —á–∞—Å–æ–≤). "
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ: –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é –∑–∞–¥–∞—á, –ø–∞—Ä–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Ä–∞–±–æ—Ç—É —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –¥–æ–ª–≥–æ–º."
            )
        elif bottleneck_stage == "testing":
            recommendations.append(
                f"‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —É–∑–∫–æ–µ –º–µ—Å—Ç–æ (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {avg_time_in_stage:.1f} —á–∞—Å–æ–≤). "
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ QA —Ä–µ—Å—É—Ä—Å–æ–≤."
            )
        elif bottleneck_stage == "todo":
            recommendations.append(
                f"–ó–∞–¥–∞—á–∏ –¥–æ–ª–≥–æ –æ–∂–∏–¥–∞—é—Ç –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {avg_time_in_stage:.1f} —á–∞—Å–æ–≤). "
                "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é –±–µ–∫–ª–æ–≥–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã."
            )
        
        if impact_score > 70:
            recommendations.append(
                "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–∑–∫–æ–µ –º–µ—Å—Ç–æ —Å –≤—ã—Å–æ–∫–∏–º –≤–ª–∏—è–Ω–∏–µ–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."
            )
        elif impact_score > 40:
            recommendations.append(
                "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–º–µ—Ä–µ–Ω–Ω–æ–µ —É–∑–∫–æ–µ –º–µ—Å—Ç–æ. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞."
            )
        
        if not recommendations:
            recommendations.append("–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–∑–∫–∏—Ö –º–µ—Å—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏–¥—ë—Ç –≥–ª–∞–¥–∫–æ.")
        
        # Add stage-specific metrics
        stage_breakdown = {
            stage: {
                "avg_time": round(avg, 2),
                "count": len(stages[stage])
            }
            for stage, avg in stage_averages.items()
        }
        
        return {
            "team_id": team_id,
            "bottleneck_stage": bottleneck_stage,
            "avg_time_in_stage": round(avg_time_in_stage, 2),
            "affected_tasks_count": affected_tasks_count,
            "impact_score": round(impact_score, 2),
            "recommendations": recommendations,
            "stage_breakdown": stage_breakdown,
            "period_start": period_start,
            "period_end": period_end,
        }

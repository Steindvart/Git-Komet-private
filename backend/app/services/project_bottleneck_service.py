"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–∑–∫–∏—Ö –º–µ—Å—Ç –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º.
Service for analyzing project workflow bottlenecks.
"""
from typing import Dict, Optional, List
from datetime import datetime
from sqlalchemy.orm import Session
from app.models.models import Project, Task, PullRequest, CodeReview


class ProjectBottleneckService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–∑–∫–∏—Ö –º–µ—Å—Ç –≤ workflow –ø—Ä–æ–µ–∫—Ç–∞."""

    @staticmethod
    def analyze_bottlenecks(
        db: Session,
        project_id: int,
        period_start: datetime,
        period_end: datetime
    ) -> Optional[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç –≤ workflow –ø—Ä–æ–µ–∫—Ç–∞.
        Analyze project workflow bottlenecks.
        """
        project = db.query(Project).filter(Project.id == project_id).first()
        if not project:
            return None
        
        # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
        tasks = db.query(Task).filter(
            Task.project_id == project_id,
            Task.created_at.between(period_start, period_end)
        ).all()
        
        if not tasks:
            return {
                "project_id": project_id,
                "bottleneck_stage": "none",
                "avg_time_in_stage": 0.0,
                "affected_tasks_count": 0,
                "impact_score": 0.0,
                "recommendations": ["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–∑–∫–∏—Ö –º–µ—Å—Ç."],
                "stage_times": {
                    "todo": 0.0,
                    "development": 0.0,
                    "review": 0.0,
                    "testing": 0.0
                },
                "period_start": period_start,
                "period_end": period_end,
            }
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
        stage_times = {
            "todo": [],
            "development": [],
            "review": [],
            "testing": []
        }
        
        for task in tasks:
            if task.time_in_todo:
                stage_times["todo"].append(task.time_in_todo)
            if task.time_in_development:
                stage_times["development"].append(task.time_in_development)
            if task.time_in_review:
                stage_times["review"].append(task.time_in_review)
            if task.time_in_testing:
                stage_times["testing"].append(task.time_in_testing)
        
        # –í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_stage_times = {}
        for stage, times in stage_times.items():
            avg_stage_times[stage] = sum(times) / len(times) if times else 0.0
        
        # –ù–∞–π—Ç–∏ —É–∑–∫–æ–µ –º–µ—Å—Ç–æ (—ç—Ç–∞–ø —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º)
        bottleneck_stage = max(avg_stage_times.items(), key=lambda x: x[1])[0] if avg_stage_times else "none"
        avg_time_in_stage = avg_stage_times.get(bottleneck_stage, 0.0)
        
        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –∑–∞–¥–∞—á–∏
        affected_tasks_count = len(stage_times.get(bottleneck_stage, []))
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Ü–µ–Ω–∫—É –≤–ª–∏—è–Ω–∏—è (0-100)
        # –ß–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º—è –∏ –∑–∞–¥–∞—á, —Ç–µ–º –≤—ã—à–µ –≤–ª–∏—è–Ω–∏–µ
        if bottleneck_stage != "none":
            time_impact = min(50, (avg_time_in_stage / 24) * 10)  # –î–æ 50 –±–∞–ª–ª–æ–≤ –∑–∞ –≤—Ä–µ–º—è
            task_impact = min(50, (affected_tasks_count / len(tasks)) * 50)  # –î–æ 50 –±–∞–ª–ª–æ–≤ –∑–∞ –æ—Ö–≤–∞—Ç
            impact_score = time_impact + task_impact
        else:
            impact_score = 0.0
        
        # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        
        stage_names = {
            "todo": "TODO (–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞)",
            "development": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            "review": "–†–µ–≤—å—é –∫–æ–¥–∞",
            "testing": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        }
        
        if bottleneck_stage == "review":
            if avg_time_in_stage > 48:
                recommendations.append("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ —Ä–µ–≤—å—é (>2 –¥–Ω–µ–π). –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≤—å—é–µ—Ä–æ–≤ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SLA.")
            elif avg_time_in_stage > 24:
                recommendations.append("–í—Ä–µ–º—è –≤ —Ä–µ–≤—å—é –≤—ã—Å–æ–∫–æ–µ (>1 –¥–Ω—è). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≤—å—é.")
            else:
                recommendations.append("–†–µ–≤—å—é - —É–∑–∫–æ–µ –º–µ—Å—Ç–æ, –Ω–æ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–ª–µ–º–æ–µ. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç—Ä–µ–Ω–¥–æ–º.")
        elif bottleneck_stage == "development":
            if avg_time_in_stage > 72:
                recommendations.append("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ - –¥–µ–∫–æ–º–ø–æ–∑–∏—Ä—É–π—Ç–µ –∏—Ö.")
            else:
                recommendations.append("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")
        elif bottleneck_stage == "testing":
            if avg_time_in_stage > 48:
                recommendations.append("‚ö†Ô∏è –î–æ–ª–≥–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤ –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ QA —Ä–µ—Å—É—Ä—Å–æ–≤.")
            else:
                recommendations.append("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —É–∑–∫–æ–µ –º–µ—Å—Ç–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã QA.")
        elif bottleneck_stage == "todo":
            recommendations.append("‚ö†Ô∏è –ó–∞–¥–∞—á–∏ –¥–æ–ª–≥–æ –∂–¥—É—Ç –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é –∏ –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–∞–Ω–¥—ã.")
        else:
            recommendations.append("‚úì –ù–µ—Ç —è–≤–Ω—ã—Ö —É–∑–∫–∏—Ö –º–µ—Å—Ç –≤ workflow. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
        
        # –î–æ–±–∞–≤–∏—Ç—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if impact_score > 70:
            recommendations.append(f"–£–∑–∫–æ–µ –º–µ—Å—Ç–æ –Ω–∞ —ç—Ç–∞–ø–µ '{stage_names.get(bottleneck_stage, bottleneck_stage)}' —Å–µ—Ä—å—ë–∑–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞.")
        
        return {
            "project_id": project_id,
            "bottleneck_stage": bottleneck_stage,
            "avg_time_in_stage": round(avg_time_in_stage, 2),
            "affected_tasks_count": affected_tasks_count,
            "impact_score": round(impact_score, 2),
            "recommendations": recommendations,
            "stage_times": {k: round(v, 2) for k, v in avg_stage_times.items()},
            "period_start": period_start,
            "period_end": period_end,
        }
    
    @staticmethod
    def get_prs_needing_attention(
        db: Session,
        project_id: int,
        min_hours_in_review: float = 96.0,
        limit: int = 5
    ) -> Optional[List[Dict]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ PR/MR, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è (–¥–æ–ª–≥–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —Ä–µ–≤—å—é).
        Get list of PR/MRs that need attention (long time in review).
        
        Args:
            db: Database session
            project_id: ID –ø—Ä–æ–µ–∫—Ç–∞
            min_hours_in_review: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞ —Ä–µ–≤—å—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ PR –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ PR/MR —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–µ–≤—å—é –∏–ª–∏ None –µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        project = db.query(Project).filter(Project.id == project_id).first()
        if not project:
            return None
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ PR –ø—Ä–æ–µ–∫—Ç–∞
        open_prs = db.query(PullRequest).filter(
            PullRequest.project_id == project_id,
            PullRequest.state == "open"
        ).all()
        
        if not open_prs:
            return []
        
        pr_list = []
        now = datetime.utcnow()
        
        for pr in open_prs:
            # –ù–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ —Ä–µ–≤—å—é –¥–ª—è PR
            first_review = db.query(CodeReview).filter(
                CodeReview.pull_request_id == pr.id
            ).order_by(CodeReview.created_at.asc()).first()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–µ–≤—å—é, —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–≤—å—é
            # –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è PR
            if first_review:
                time_in_review_hours = (now - first_review.created_at).total_seconds() / 3600
            else:
                # PR —Å–æ–∑–¥–∞–Ω, –Ω–æ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª —Ä–µ–≤—å—é - —Å—á–∏—Ç–∞–µ–º —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                time_in_review_hours = (now - pr.created_at).total_seconds() / 3600
            
            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if time_in_review_hours < 24:
                indicator = "‚òÄÔ∏è"  # –ú–µ–Ω—å—à–µ —Å—É—Ç–æ–∫
            elif time_in_review_hours < 96:
                indicator = "üåßÔ∏è"  # –û—Ç 1 –¥–æ 4 –¥–Ω–µ–π
            else:
                indicator = "üå©Ô∏è"  # –ë–æ–ª—å—à–µ 4 –¥–Ω–µ–π
            
            # –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ PR, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ —Ä–µ–≤—å—é –±–æ–ª—å—à–µ min_hours_in_review
            if time_in_review_hours >= min_hours_in_review:
                pr_list.append({
                    "pr_id": pr.id,
                    "external_id": pr.external_id,
                    "title": pr.title,
                    "author_id": pr.author_id,
                    "created_at": pr.created_at,
                    "time_in_review_hours": round(time_in_review_hours, 1),
                    "indicator": indicator,
                    "has_reviews": first_review is not None,
                    "review_cycles": pr.review_cycles
                })
        
        # –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–µ–≤—å—é (—É–±—ã–≤–∞–Ω–∏–µ), –∑–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—É–±—ã–≤–∞–Ω–∏–µ)
        pr_list.sort(key=lambda x: (-x["time_in_review_hours"], -x["created_at"].timestamp()))
        
        # –í–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ limit –∑–∞–ø–∏—Å–µ–π
        return pr_list[:limit]

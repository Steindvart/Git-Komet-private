"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞.
Service for analyzing project technical debt.

–ù–æ–≤–æ–µ –¢–ó: –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ git –∫–æ–º–º–∏—Ç—ã –∏ –∏—Ö diff.
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ —Ç–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø–æ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –∏–∑ diff –∫–æ–º–º–∏—Ç–æ–≤.
"""
from typing import Dict, List, Optional
from datetime import datetime
from sqlalchemy.orm import Session
from app.models.models import Project, ProjectMember, Commit, TechnicalDebtMetric
import json


class ProjectTechnicalDebtService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""

    @staticmethod
    def analyze_technical_debt(
        db: Session,
        project_id: int,
        period_start: datetime,
        period_end: datetime
    ) -> Optional[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫–æ–º–º–∏—Ç–∞—Ö.
        Analyze project technical debt based on TODO comments in commits.
        
        –ù–æ–≤–æ–µ –¢–ó: –§–æ–∫—É—Å –¢–û–õ–¨–ö–û –Ω–∞ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–∑ diff –∫–æ–º–º–∏—Ç–æ–≤.
        –£–±—Ä–∞–ª–∏: –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏, –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ–≤—å—é, code churn.
        """
        project = db.query(Project).filter(Project.id == project_id).first()
        if not project:
            return None
        
        member_ids = [member.id for member in project.members]
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        commits = db.query(Commit).filter(
            Commit.author_id.in_(member_ids),
            Commit.committed_at.between(period_start, period_end)
        ).all()
        
        if not commits:
            return {
                "project_id": project_id,
                "todo_count": 0,
                "todo_trend": "stable",
                "technical_debt_score": 0.0,
                "recommendations": ["–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."],
                "period_start": period_start,
                "period_end": period_end,
            }
        
        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å TODO –≤ –∫–æ–¥–µ –∏–∑ –∫–æ–º–º–∏—Ç–æ–≤
        todo_count = sum(c.todo_count for c in commits)
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ TODO
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ—Ä–æ–≥–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        if todo_count > 50:
            todo_trend = "up"  # –†–∞—Å—Ç–µ—Ç
        elif todo_count < 10:
            todo_trend = "down"  # –°–Ω–∏–∂–∞–µ—Ç—Å—è
        else:
            todo_trend = "stable"  # –°—Ç–∞–±–∏–ª—å–Ω–æ
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Ü–µ–Ω–∫—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ (0-100, –º–µ–Ω—å—à–µ –ª—É—á—à–µ)
        # –û—Ü–µ–Ω–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –¢–û–õ–¨–ö–û –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ TODO
        # 0 TODO = 0 –±–∞–ª–ª–æ–≤ –¥–æ–ª–≥–∞ (–æ—Ç–ª–∏—á–Ω–æ)
        # 100 TODO = 50 –±–∞–ª–ª–æ–≤ –¥–æ–ª–≥–∞
        # 200+ TODO = 100 –±–∞–ª–ª–æ–≤ –¥–æ–ª–≥–∞ (–∫—Ä–∏—Ç–∏—á–Ω–æ)
        technical_debt_score = min(100, (todo_count / 200) * 100)
        
        # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        
        if todo_count == 0:
            recommendations.append("‚úì –û—Ç–ª–∏—á–Ω–æ! –ù–µ—Ç TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫–æ–º–º–∏—Ç–∞—Ö.")
        elif todo_count <= 10:
            recommendations.append("‚úì –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å TODO. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
        elif todo_count <= 30:
            recommendations.append("–£–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TODO. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è.")
        elif todo_count <= 50:
            recommendations.append("‚ö†Ô∏è –ó–∞–º–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TODO –≤ –∫–æ–¥–µ. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è.")
        elif todo_count <= 100:
            recommendations.append("‚ö†Ô∏è –ú–Ω–æ–≥–æ TODO –≤ –∫–æ–¥–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ.")
        else:
            recommendations.append("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TODO –≤ –∫–æ–¥–µ! –ù–µ–æ–±—Ö–æ–¥–∏–º –ø–ª–∞–Ω –ø–æ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞.")
        
        # –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ç—Ä–µ–Ω–¥—É
        if todo_trend == "up":
            recommendations.append("üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ TODO —Ä–∞—Å—Ç–µ—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å–∏–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞.")
        elif todo_trend == "down":
            recommendations.append("üìâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ TODO —Å–Ω–∏–∂–∞–µ—Ç—Å—è. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞!")
        
        return {
            "project_id": project_id,
            "todo_count": todo_count,
            "todo_trend": todo_trend,
            "technical_debt_score": round(technical_debt_score, 2),
            "recommendations": recommendations,
            "period_start": period_start,
            "period_end": period_end,
        }

    @staticmethod
    def save_technical_debt_metric(
        db: Session,
        project_id: int,
        metrics: Dict,
        period_start: datetime,
        period_end: datetime
    ) -> TechnicalDebtMetric:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        metric = TechnicalDebtMetric(
            project_id=project_id,
            test_coverage=None,  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º –¢–ó
            test_coverage_trend=None,  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º –¢–ó
            todo_count=metrics.get("todo_count", 0),
            todo_trend=metrics.get("todo_trend"),
            review_comment_density=None,  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º –¢–ó
            measured_at=datetime.utcnow(),
            period_start=period_start,
            period_end=period_end
        )
        db.add(metric)
        db.commit()
        db.refresh(metric)
        return metric
